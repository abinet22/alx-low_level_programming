!<arch>
0_isupper.c/    0           0     0     644     240       `
#include <stdio.h>

/**
	* _isupper - define if a character is upper case.
	*
	*@c: the character to be tested.
	* Return: 1 if true or 0 if false.
	*/

int _isupper(int c)
{
if ((c > 64) && (c < 91))
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     521       `
#include "main.h"

/**
 * _memset - Fills the first n bytes of the memory area
 *          pointed to by @s with the constant byte @c.
 * @s: A pointer to the memory area to be filled.
 * @c: The character to fill the memory area with.
 * @n: The number of bytes to be filled.
 *
 * Return: A pointer to the filled memory area @s.
 */
void *_memset(void *s, int c, size_t n)
{
	unsigned int index;
	unsigned char *memory = s, value = c;

	for (index = 0; index < n; index++)
		memory[index] = value;

	return (memory);
}

0-putchar.c/    0           0     0     644     267       `
#include "main.h"


/**
 * main - Prints _putchar with _putchar
 * Description: Prints _putchar with _putchar
 * Return: Always 0 (Success)
 */

int main(void)
{
int i = 0;
char c;
char s[] = "_putchar\n";
while (i < 9)
{
c = s[i];
_putchar(c);
i++;
}

return (0);
}

0-strcat.c/     0           0     0     644     338       `
#include "main.h"

/**
 * _strcat - Concatenate a string to another string
 * @dest: Destination string
 * @src: Source string
 *
 * Return: Destination string as a pointer
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;

	while (*(dest + i))
		i++;
	while (*(src))
	{
		*(dest + i) = *(src);
		i++;
		src++;
	}

	return (dest);
}
100-atoi.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 *@s: pointer
 * Return: Always 0 (Success)
 */
int _atoi(char *s)
{
	int nev = 1;
	int i;
	unsigned int num = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
		{
			nev *= -1;
		}
		else if (s[i] >= '0' && s[i] <= '9')
		{
			num = (num * 10) + (s[i] - '0');
		}
		else if (num > 0)
		{
			break;
		}
	}
	return (num * nev);
}
1-isdigit.c/    0           0     0     644     235       `
#include "main.h"

/**
 * _isdigit - Checks  for a digit (0 through 9).
 * @c: The character to be checked.
 *
 * Return: 1 if is a digit, 0 otherwise.
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     255       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest:char
 * @src:char
 * @n:int
 * Return:char pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

return (dest);
}

1-strncat.c/    0           0     0     644     551       `
#include "main.h"

/**
 * _strncat - Concatenates two strings using at most
 *            an inputted number of bytes from src.
 * @dest: The string to be appended upon.
 * @src: The string to be appended to dest.
 * @n: The number of bytes from src to be appended to dest.
 *
 * Return: A pointer to the resulting string dest.
 */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];

	return (dest);
}

2-strchr.c/     0           0     0     644     403       `
#include "main.h"

/**
 * _strchr - Locates a character in a string.
 * @s: The string to be searched.
 * @c: The character to be located.
 *
 * Return: If c is found - a pointer to the first occurence.
 *         If c is not found - NULL.
 */
char *_strchr(char *s, char c)
{
	int index;

	for (index = 0; s[index] >= '\0'; index++)
	{
		if (s[index] == c)
			return (s + index);
	}

	return ('\0');
}

2-strlen.c/     0           0     0     644     258       `
#include "main.h"

/**
 * _strlen - determins the length of a string.
 * @s: accepts address of the passed argument, its a pointer.
 * Return: the length of a string.
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     585       `
#include "main.h"

/**
 * _strncpy - Copies at most an inputted number
 *            of bytes from string src into dest.
 * @dest: The buffer storing the string copy.
 * @src: The source string.
 * @n: The maximum number of bytes to copied from src.
 *
 * Return: A pointer to the resulting string dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int index = 0, src_len = 0;

	while (src[index++])
		src_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[index] = src[index];

	for (index = src_len; index < n; index++)
		dest[index] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     248       `
#include "main.h"

/**
 * _islower - Checks if a character is lowercase.
 * @c: The character to be checked.
 *
 * Return: 1 if character is lowercase, 0 otherwise.
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}
3-puts.c/       0           0     0     644     274       `
#include "main.h"
/**
 * _puts - prints a string to stdout but character wise.
 * @str: pointer which accepts address of a string value.
 * Return: nothing.
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     477       `
#include "main.h"

/**
 * _strcmp - Compares pointers to two strings.
 * @s1: A pointer to the first string to be compared.
 * @s2: A pointer to the second string to be compared.
 *
 * Return: If str1 < str2, the negative difference of the characters.
 *         If str1 == str2, 0.
 *         If str1 > str2, the positive difference of the first characters.
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     368       `
#include "main.h"
/**
 * _strspn - get the lenght of prefix substring
 * @s:string
 * @accept:string
 * Return:unsigned int
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int x;
int i;

x = 0;
while (*s)
{
for (i = 0; accept[i]; i++)
{
	if (*s == accept[i])
	{
		x++;
		break;
	}
	else if (accept[i + 1] == '\0')
	{
		return (x);
	}
}
s++;
}
return (x);
}
4-isalpha.c/    0           0     0     644     272       `
#include "main.h"

/**
 * _isalpha - Checks if a character is alpha.
 * @c: The character to be checked.
 *
 * Return: 1 if character is lowercase, 0 otherwise.
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}
5-strstr.c/     0           0     0     644     683       `
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 *         If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     232       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer.
 * @n: The integer to be computed.
 *
 * Return: The absolute value of the integer.
 */
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-n);
}
9-strcpy.c/     0           0     0     644     367       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src, including the
 *	terminating null byte (\0), to the buffer pointed to by dest.
 *@dest: pointer
 *@src: pointer
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	*(dest + i) = '\0';
	return (dest);
}

